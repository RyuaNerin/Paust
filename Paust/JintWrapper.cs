using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using Dalamud.Logging;
using Jint;
using Jint.Native;
using Jint.Runtime;
using Jint.Runtime.Environments;
using Paust.Game.Data;
using Paust.PartyFinder;

namespace Paust
{
    internal class JintWrapper
    {
        public static PartyFinderPacketListing SampleListing { get; }

        static JintWrapper()
        {
            var sampleData = new byte[]
            {
                0x00, 0x00, 0x00, 0x00, 0x13, 0x88, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x88, 0x14, 0xcf, 0x3b, 0x00, 0x00, 0x40, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xec, 0x02,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00,
                0x05, 0x00, 0x1d, 0x08, 0x00, 0x00, 0x00, 0x04, 0x40, 0x80,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xc5, 0xcf, 0x36, 0x61, 0xde, 0x0b, 0x00, 0x00, 0x06, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x1d, 0x08, 0x1d, 0x08, 0x40, 0x08,
                0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
                0x0a, 0x05, 0x20, 0x04, 0x00, 0x20, 0x00, 0x00, 0x40, 0x20,
                0x42, 0x00, 0xb4, 0xda, 0x9d, 0x09, 0xb4, 0xda, 0x9d, 0x09,
                0x13, 0x26, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0xb9,
                0xa1, 0xeb, 0xb9, 0xa1, 0xec, 0x9d, 0xb4, 0xec, 0xb2, 0x98,
                0xec, 0x9d, 0x8c, 0xeb, 0xb3, 0xb4, 0xeb, 0x8b, 0x88, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xea, 0xb0, 0xb1, 0xec, 0x8b, 0xa0, 0x20, 0x33, 0xed, 0x81,
                0xb4, 0x20, 0xec, 0x82, 0xac, 0xec, 0x9e, 0xa5, 0xed, 0x8c,
                0x9f, 0x20, 0x38, 0xeb, 0xb6, 0x84, 0x20, 0x32, 0x30, 0xec,
                0xb4, 0x88, 0x20, 0xeb, 0x82, 0xb4, 0xec, 0x99, 0xb8, 0x20,
                0xec, 0xbb, 0xb7, 0x20, 0x31, 0xed, 0x81, 0xb4, 0xeb, 0x8b,
                0xb9, 0x20, 0xec, 0x9d, 0xb8, 0xeb, 0x8b, 0xb9, 0x20, 0x34,
                0x30, 0x20, 0x20, 0xec, 0xa7, 0x81, 0xec, 0x97, 0x85, 0x20,
                0xec, 0x95, 0x88, 0xea, 0xb0, 0x80, 0xeb, 0xa6, 0xbc, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };

            var ptr = IntPtr.Zero;
            try
            {
                ptr = Marshal.AllocHGlobal(sampleData.Length);
                SampleListing = Marshal.PtrToStructure<PartyFinderPacketListing>(ptr);
            }
            finally
            {
                if (ptr != IntPtr.Zero)
                {
                    Marshal.FreeHGlobal(ptr);
                }

            }
        }

        private Engine Engine { get; }

        private readonly Dictionary<string, object> globals = new()
        {
            { "jobs"       , JobConst.Instance       },
            { "slot_flags" , SlotConst.Instance      },
            { "content_ids", ContentIdConst.Instance },
            { "item_rules" , ItemRules.Instance      },
            { "objectives" , Objectives.Instance     },

            { "print", new PrintDelegate(Print) },
        };

        private delegate void PrintDelegate(params object[] args);
        private static void Print(params object[] args)
        {
            var sb = new StringBuilder();
            foreach (var arg in args)
            {
                sb.Append(arg);
                sb.Append(' ');
            }

            PluginLog.Information("PRINT: {0}", sb);
        }

        public JintWrapper()
        {
            this.Engine = new Engine(opt =>
            {
                opt.TimeoutInterval(TimeSpan.FromSeconds(1));
                opt.LimitRecursion(100);
                opt.MaxStatements(100);
                opt.LocalTimeZone(TimeZoneInfo.Local);
            });
        }

        public bool Eval(string script, PartyFinderPacketListing listing)
        {
            globals["party"] = JsValue.FromObject(this.Engine, new PartyFinderWrapper(listing));

            var env = LexicalEnvironment.NewObjectEnvironment(
                this.Engine,
                JsValue.FromObject(this.Engine, globals).AsObject(),
                this.Engine.GlobalEnvironment,
                false
            );

            this.Engine.EnterExecutionContext(env, env, this.Engine.Global);
            try
            {
                this.Engine.Execute(script);

                var result = this.Engine.GetCompletionValue();

                if (result.Type == Types.Boolean)
                {
                    return result.AsBoolean();
                }
                else
                {
                    throw new Exception($"반환 타입은 반드시 boolean 이여야 합니다.\n\n현재 반환 타입: {result.Type}");
                }
            }
            finally
            {
                this.Engine.LeaveExecutionContext();
            }
        }
    }
}
